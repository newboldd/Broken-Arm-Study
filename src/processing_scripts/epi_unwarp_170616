#!/bin/tcsh -f
#Processing steps taken from FSL's featlib.tcl
#Tyler Blazey, 2011-2012.
#Jonathan Koller
#$Header: /data/petsun4/data1/solaris/csh_scripts/RCS/epi_unwarp_170616,v 1.2 2020/07/24 21:19:32 avi Exp $
#$Log: epi_unwarp_170616,v $
# Revision 1.2  2020/07/24  21:19:32  avi
# eliminate calls to fsl imcp to eliminate dependence on fsl versions
#
# Revision 1.1  2017/07/07  05:45:16  avi
# Initial revision
#
set idstr = '$Id: epi_unwarp_170616,v 1.2 2020/07/24 21:19:32 avi Exp $'
echo $idstr
set program = $0:t

if ( $?FSLDIR == 0 ) then
	echo $program" error: FSLDIR environment variable not set"
	exit -1
else
	set FSL = $FSLDIR/bin
endif

#######
# Usage
#######
if ( $#argv == 0 ) then
	echo ""
	echo "${program}: A basic wrapper for FSL's field map tools."
	echo ""
	echo "Usage: ${program} -m <mag> -p <phase> -e <epi> -dwell <dwell> -te <te> -delta <delta> [options]"
	echo ""
	echo "Required Arguments:"
	echo "	-m <mag>		Field map magnitude image."
	echo "	-p <phase> 		Field map phase image."
	echo "	-e <epi> 		EPI to unwarp."
	echo "	-dwell <dwell>		EPI dwell time/echo spacing (ms). Divide by acceleration factor if necessary."
	echo "	-te <te> 		EPI echo time (ms)."
	echo "	-delta <delta> 		Difference between field map echo times (ms)."
	echo ""
	echo "Optional Arguments:"
	echo "	-magmask <magmask> 	Specify magnitude mask image instead of estimating with BET."
	echo "	-reg <reg> 		Field map regulation. Takes despike, smooth, median, or none. Default is despike."
	echo "	-ref <ref>		EPI frame to extract for registration. Default is 0."
	echo "	-o <outdir> 		Directory to store results. Default is unwarp."
	echo "	-r <outroot> 		Root for results. No root is used by default."
	echo "	-thresh <thresh> 	Signal loss threshhold. Default is 0.1."
	echo "	-dthresh <dthresh> 	Despike threshhold. For use with -reg despike. Default is 2.1."
	echo " 	-mm3 <mm3> 		Size of kernel to use with -reg smooth. Default is 5."
	echo " 	-dir <dir> 		EPI phase encoding direction. Takes x,x-,y,y-,z,z-. Default is y-."
	echo "	-epibet <epibet> 	BET fractional intensity threshold for EPI. Default is .2."
	echo "	-magbet <magbet> 	BET fractional intensity threshold for magnitude image. Default is .3."
	echo "	-cost <cost>		Cost function for -boldmc. Default is normcorr."
	echo "	-dof <dof>		Number of degrees of freedom for registration between epi and magnitude."
	echo "	-dtimc 			Use FSL to motion correct dti input. Will only resample once."
	echo "	-boldmc 		Use FSL to motion correct bold input. Will only resample once."
	echo "	-meanmap 		Turn off conversion to radians/sec and phase unwrapping."
	echo "	-nounwrap 		Turn off phase unwrapping."
	echo " 	-nomask 		Do not use brain mask when applying to 4D series."
	echo "	-no4d			Do not apply to whole 4D series. Overridden by -bold or -dtimc."
	echo " 	-dil 			Dilate magnitude brain mask before applying shift map to EPI."
	echo "	-nosig			Do not use signal loss weighting."
	echo "	-debug			Turn on set echo."
	echo ""
	echo "Tips:"
	echo "	Standard CAP DTI parameters:  Dwell Time=.98ms, Echo Time=112ms."
	echo "	Standard CAP BOLD parameters: Dwell Time=.47ms, Echo Time=27ms."
	echo "	Standard CAP Field Map delta TE=2.46ms."
	echo ""
	exit 1
endif

#################
# parse arguments
#################
set args = ( $argv )
while ($#argv > 0)
	set flag = $argv[1]; shift;
	switch ($flag)
		case -m:
			if ( `$FSL/imtest $argv[1]` == 0 ) then
				echo "Error: Cannot find magnitude image at $argv[1]."
				exit 1
			endif
			set mag = `$FSLDIR/bin/remove_ext $argv[1]`; shift; breaksw
		case -p:
			if ( `$FSL/imtest $argv[1]` == 0 ) then
				echo "Error: Cannot find phase image at $argv[1]."
				exit 1
			endif
			set phase = `$FSLDIR/bin/remove_ext $argv[1]`; shift; breaksw
		case -e:
			if ( `$FSL/imtest $argv[1]` == 0 ) then
				echo "Error: Cannot find epi image at $argv[1]."
				exit 1
			endif
			set epi = `$FSLDIR/bin/remove_ext $argv[1]`; shift; breaksw
		case -dwell:
			set dwell = `echo "$argv[1]/1000" | bc -l`; shift; breaksw
		case -te:
			set te = `echo "$argv[1]/1000" | bc -l`; shift; breaksw
		case -delta:
			set delta = `echo "$argv[1]/1000" | bc -l`; shift; breaksw
		case -magmask:
			if ( `$FSL/imtest $argv[1]` == 0 ) then
				echo "Error: Cannot find magnitude mask image at $argv[1]."
				exit 1
			endif
			set magmask = `$FSLDIR/bin/remove_ext $argv[1]`; shift; breaksw
		case -reg:
			set reg = $argv[1]; shift; breaksw
		case -ref:
			set ref = $argv[1]; shift; breaksw
		case -o:
			set outdir = $argv[1]; shift; breaksw
		case -r:
			set outroot = "$argv[1]_"; shift; breaksw
		case -thresh:
			set thresh = `echo "1-$argv[1]" | bc -l` ; shift; breaksw
		case -dthresh:
			set dthresh = $argv[1]; shift; breaksw
		case -mm3:
			set mm3 = $argv[1]; shift; breaksw
		case -dir:
			set dir = $argv[1]; shift; breaksw
		case -epibet:
			set epibet = $argv[1]; shift; breaksw
		case -magbet:
			set magbet = $argv[1]; shift; breaksw
		case -cost:
			set cost = $argv[1]; shift; breaksw
		case -dof:
			set dof = $argv[1]; shift; breaksw;
		case -dtimc:
			set dtimc = 1; breaksw
		case -boldmc:
			set boldmc = 1; breaksw
		case -meanmap:
			set meanmap = 1; breaksw
		case -nounwrap:
			set nounwrap = 1; breaksw
		case -nomask:
			set mask = ""; breaksw
		case -no4d:
			set no4d = 1; breaksw
		case -dil:
			set dil = 1; breaksw
		case -nosig:
			set nosig = 1; breaksw
		case -debug:
			set echo; breaksw
		default:
			echo $program": Option $flag not recognized. See usage"
			exit -1
	endsw
end

#############################
# check options, set defaults
#############################
#Check to make sure all required options have been set
if ( $?mag == 0 || $?epi == 0 || $?phase == 0  || $?dwell == 0 || $?te == 0 ) then
	echo $program": Missing required arguments. See usage"
	exit -1
endif

if ( $?ref == 0 )	set ref = 0;
if ( $?outdir == 0 )	set outdir = "unwarp"
if ( ! -d $outdir )	mkdir $outdir
if ( $?outroot == 0 )	set outroot = ""
if ( $?thresh == 0 )	set thresh = 0.9
if ( $?reg == 0 )	set reg = "despike"
if ( $reg == "despike" && $?dthresh == 0 )	set dthresh = 2.1
if ( $reg == "smooth" && $?mm3 == 0 )		set mm3 = 5
if ( $?dir == 0 )	set dir = "y-"
if ( $?epibet == 0 )	set epibet = .2
if ( $?magbet == 0 )	set magbet = .3
if ( $?cost == 0 )	set cost = "normcorr"
if ( $?nosig == 0 )	set nosig = 0
if ( $?dof == 0 )	set dof = 6

# make sure -reg is set correctly
set reg_options = ( "smooth" "median" "none" "despike" ); echo $reg_options | grep -qw $reg;
if ( $? == 1 ) then
	echo $program": -reg option $reg not known. See usage"
	exit -1
endif

# make sure -dir is set correctly
set dir_options = ( "x" "x-" "y" "y-" "z" "z-" ); echo $dir_options | grep -qw $dir;
if ( $? == 1 ) then
	echo $program": -dir option $dir not known. See usage"
	exit -1
endif

#Create log file
set out = $outdir/$outroot; set pout = ${outdir}/${outroot}phase
set log = $outdir/${program}.log
echo "" |& tee $log
echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "" |& tee -a $log
echo "Program: ${program}" |& tee -a $log
echo "Outdir: $outdir" |& tee -a $log
echo "Outroot: $outroot" |& tee -a $log
echo "Start Time: `date '+%Y-%m-%d-%I-%M-%S'`" |& tee -a $log
echo "User: `whoami`" |& tee -a $log
echo "System Info: `uname -a`" |& tee -a $log
echo "Working Directory `pwd`" |& tee -a $log
echo "Input arguments: $args" |& tee -a $log
echo "FSLDIR: $FSLDIR" |& tee -a $log
echo "FSL Version: `more $FSLDIR/etc/fslversion`" |& tee -a $log
echo "" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "" |& tee -a $log

#####################################
#Preproc, Unit Conversion, Unwraping#
#####################################

# copy images over



set mag = `echo $mag | sed 's|.nii\(.gz$\)*$||'`
if ( -e $mag.nii ) then
	set cmd = ( cp $mag.nii ${out}mag.nii ); echo $cmd |& tee -a $log; $cmd |& tee -a $log
else if ( -e $mag.nii.gz ) then
	echo "gunzip  -c $mag.nii.gz > ${out}mag.nii"
	gunzip  -c $mag.nii.gz > ${out}mag.nii
endif

set epi = `echo $epi | sed 's|.nii\(.gz$\)*$||'`
if ( -e $epi.nii ) then
	set cmd = ( cp $epi.nii ${out}epi.nii ); echo $cmd |& tee -a $log; $cmd |& tee -a $log
else if ( -e $epi.nii.gz ) then
	echo "gunzip  -c $epi.nii.gz > ${out}epi.nii"
	gunzip  -c $epi.nii.gz > ${out}epi.nii
endif

set phase = `echo $phase | sed 's|.nii\(.gz$\)*$||'`
if ( -e $phase.nii ) then
	set cmd = ( cp $phase.nii ${out}phase.nii ); echo $cmd |& tee -a $log; $cmd |& tee -a $log
else if ( -e $phase.nii.gz ) then
	echo "gunzip  -c $phase.nii.gz > ${out}phase.nii"
	gunzip  -c $phase.nii.gz > ${out}phase.nii
endif

# create brain mask for magnitude
if ( $?magmask == 0 ) then
	set cmd = ( $FSL/bet ${out}mag ${out}mag_brain -f $magbet -m -R )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
else
	set magmask = `echo $magmask | sed 's|.nii\(.gz$\)*$||'`
	if ( -e $magmask.nii ) then
		set cmd = ( cp $magmask.nii ${out}mag_brain_mask.nii ); echo $cmd |& tee -a $log; $cmd |& tee -a $log
	else if ( -e $magmask.nii.gz ) then
		echo "gunzip  -c $magmask.nii.gz > ${out}mag_brain_mask.nii"
		gunzip  -c $magmask.nii.gz > ${out}mag_brain_mask.nii
	endif
	set cmd = ( $FSL/fslmaths ${out}mag -mas ${out}mag_brain_mask ${out}mag_brain )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

if ( $?meanmap == 0 ) then
############################################
# convert spin echo field map to radians/sec
############################################
	if ( ${delta} == 0 ) then
		set cmd = ( $FSL/fslmaths ${pout} -mul 6.2832 ${pout}_rad_secs -odt float )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log; set pout = ${pout}_rad_secs
	else
######################################
# convert gre field map to radians/sec
######################################
		set range = `fslstats ${pout} -R`
		echo ${pout} "range =" $range
		@ k = `echo $range | gawk 'BEGIN {k = 0;}; ($1+4096)^2 < 25 && ($2-4095)^2 < 25 {k = 1}; $1^2 < 25 && ($2-4095)^2 < 25 {k = 2}; END {print k}'`
		switch ($k)
		case 1:
			set cmd = ( $FSL/fslmaths ${pout}           -div 4096 -mul 3.14159265 ${pout}_rad -odt float )
			breaksw;
		case 2:
			set cmd = ( $FSL/fslmaths ${pout} -sub 2048 -div 2048 -mul 3.14159265 ${pout}_rad -odt float )
			breaksw;
		default:
			echo $program": Phase map is not within expected range. Exiting..."
			exit -1;
			breaksw;
		endsw
		echo $cmd |& tee -a $log; $cmd |& tee -a $log; set pout = ${pout}_rad

		# optionally, unwrap phase with prelude
		if ( $?unwrap == 0 ) then
			set cmd = ( $FSL/prelude -p ${pout} -a ${out}mag -o ${pout}_unwrap -m ${out}mag_brain_mask )
			echo $cmd |& tee -a $log; $cmd |& tee -a $log; set pout = ${pout}_unwrap
		endif

		#Convert to radians/sec
		set cmd = ( $FSL/fslmaths ${pout} -div $delta ${pout}_secs )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log; set pout = ${pout}_secs
	endif
endif

###############
# brain masking
###############

# extract epi refrence frame, then brain extract
set cmd = ( $FSL/fslroi ${out}epi ${out}epi_${ref} $ref 1 )
echo $cmd |& tee -a $log; $cmd |& tee -a $log
set cmd = ( $FSL/bet ${out}epi_${ref} ${out}epi_${ref}_brain -m -f $epibet -R )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

# create inverted field map brain mask
set cmd = ( $FSL/fslmaths ${pout} -abs -bin -mas ${out}mag_brain_mask -mul -1 -add 1 )
set cmd = ( $cmd -bin ${pout}_inv_brain_mask ); echo $cmd |& tee -a $log; $cmd |& tee -a $log

# cluster inverted brain mask
set cmd = ( $FSL/cluster -i ${pout}_inv_brain_mask -t 0.5 --no_table )
set cmd = ( $cmd -o ${pout}_inv_brain_mask_clust ); echo $cmd |& tee -a $log; $cmd |& tee -a $log

# save intensity of largest cluster
set max = `$FSL/fslstats ${pout}_inv_brain_mask_clust -R | awk '{print $2}'`
# threshhold the image by max, then invert again. Get a new, tighter brain mask.
set cmd = ( $FSL/fslmaths ${pout}_inv_brain_mask_clust -thr $max -bin -mul -1 -add 1 -bin )
set cmd = ( $cmd -mas ${out}mag_brain_mask ${out}mag_brain_mask )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

# use the new brain mask on the field map
set cmd = ( $FSL/fslmaths ${pout} -mas ${out}mag_brain_mask ${pout}_masked )
echo $cmd |& tee -a $log; $cmd |& tee -a $log; set pout = ${pout}_masked

# get 50% brain mask
set fifty = `$FSL/fslstats ${out}mag_brain -P 98 | awk '{print ( $1 / 2 ) }'`
set cmd = ( $FSL/fslmaths ${out}mag_brain -thr $fifty -bin ${out}mag_brain_fifty_mask )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

# erode the original brain mask
set cmd = ( $FSL/fslmaths ${out}mag_brain_mask -ero ${out}mag_brain_mask_eroded )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

# add eroded and fifty masks
set cmd = ( $FSL/fslmaths ${out}mag_brain_mask_eroded -add ${out}mag_brain_fifty_mask -thr 0.5 )
set cmd = ( $cmd -bin ${out}mag_brain_mask ); echo $cmd |& tee -a $log; $cmd |& tee -a $log

# mask field map again
set cmd = ( $FSL/fslmaths ${pout} -mas ${out}mag_brain_mask ${pout} )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

# erode brain mask again
set cmd = ( $FSL/fslmaths ${out}mag_brain_mask -ero ${out}mag_brain_mask_eroded )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

###########
# filtering
###########
# create filter
set filter = ${pout}_filter_${reg}
switch ($reg)
	case "despike":
		set cmd = ( $FSL/fugue --loadfmap=${pout} --mask=${out}mag_brain_mask --despike )
		set cmd = ( $cmd --despikethreshold=$dthresh --savefmap=${filter} )
		breaksw
	case "smooth":
		set cmd = ( $FSL/fugue --loadfmap=${pout} --mask=${out}mag_brain_mask -s $mm3 )
		set cmd = ( $cmd --savefmap=${filter} )
		breaksw
	case "median":
		set cmd = ( $FSL/fugue --loadfmap=${pout} --mask=${out}mag_brain_mask -m )
		set cmd = ( $cmd --savefmap=${filter} )
		breaksw
	case "none":
		set cmd = ( $FSL/imcp ${pout} $filter )
endsw
echo $cmd |& tee -a $log; $cmd |& tee -a $log

# apply the filter to brain edges
set cmd = ( $FSL/fslmaths ${filter} -sub ${pout} -mas ${out}mag_brain_mask_eroded )
set cmd = ( $cmd -add ${pout} ${pout}_filtered ); echo $cmd |& tee -a $log; $cmd |& tee -a $log
set pout = ${pout}_filtered

# shift median to 0
set median = `$FSL/fslstats ${pout} -k ${out}mag_brain_mask -P 50`
set cmd = ( $FSL/fslmaths ${pout} -sub $median ${pout}_norm )
echo $cmd |& tee -a $log; $cmd |& tee -a $log; set pout = ${pout}_norm

#####################################
# FUGUE, Registration, Transformation
#####################################
if ( $nosig == 0 ) then

	set xfm = ${out}epi_${ref}_brain_to_${outroot}mag_brain_signal_lossed_distorted.mat
	set inv_xfm = ${out}mag_brain_signal_lossed_distorted_to_${outroot}epi_${ref}_brain.mat

	#Estimate signal loss from fieldmap. Range goes from 0 (no signal) to 1 (full signal)
	set cmd = ( $FSL/sigloss -i ${pout} --te=${te} -m ${out}mag_brain_mask -s ${out}signal_loss )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log

	#Multiply mag brain by signal loss image. Will result in a mag brain with areas of signal loss.
	set cmd = ( $FSL/fslmaths ${out}signal_loss -mul ${out}mag_brain ${out}mag_brain_signal_lossed )
	set cmd = ( $cmd -odt float ); echo $cmd |& tee -a $log; $cmd |& tee -a $log

	#Run fugue on the signal lossed magnitude image. Will distort it according to the field map.
	set cmd = ( $FSL/fugue -i ${out}mag_brain_signal_lossed --loadfmap=${pout} )
	set cmd = ( $cmd --mask=${out}mag_brain_mask -w ${out}mag_brain_signal_lossed_distorted )
	set cmd = ( $cmd --nokspace --unwarpdir=$dir --dwell=$dwell )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log

	#Do the same thing for the signal_loss fmap image.
	set cmd = ( $FSL/fugue -i ${out}signal_loss --loadfmap=${pout} --dwell=$dwell )
	set cmd = ( $cmd -w ${out}signal_loss_distorted --nokspace --unwarpdir=$dir )
	set cmd = ( $cmd --mask=${out}mag_brain_mask ); echo $cmd |& tee -a $log; $cmd |& tee -a $log

	#Threshhold the distorted signal loss brain according to user chosen signal loss threshhold
	set cmd = ( $FSL/fslmaths ${out}signal_loss_distorted -thr $thresh )
	set cmd = ( $cmd ${out}signal_loss_distorted ); echo $cmd |& tee -a $log; $cmd |& tee -a $log

	#Register the distorted magnitude to the distorted functional.
	#Use the threshholded signal loss brain as weighting (areas with 0 will be ignored)
	set cmd = ( $FSL/flirt -ref ${out}mag_brain_signal_lossed_distorted -in ${out}epi_${ref}_brain )
	set cmd = ( $cmd -omat $xfm -refweight ${out}signal_loss_distorted -dof $dof )
	set cmd = ( $cmd -out ${out}epi_${ref}_brain_to_${outroot}mag_brain_signal_lossed_distorted )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log

else

	set xfm = ${out}epi_${ref}_brain_to_${outroot}mag_brain.mat
	set inv_xfm = ${out}mag_brain_to_${outroot}epi_${ref}_brain.mat

	#Register magnitude to distorted functional without any signal loss stuff
	set cmd = ( $FSL/flirt -ref ${out}mag_brain -in ${out}epi_${ref}_brain )
	set cmd = ( $cmd -omat $xfm -dof $dof ); echo $cmd |& tee -a $log; $cmd |& tee -a $log

endif

#Invert transformation to get mag->epi
set cmd = ( $FSL/convert_xfm -omat $inv_xfm -inverse $xfm )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

#Apply transformation to original magnitude image for QA purposes
set cmd = ( $FSL/flirt -in ${out}mag_brain -ref ${out}epi_${ref}_brain -applyxfm -init )
set cmd = ( $cmd $inv_xfm -out ${out}mag_brain_to_${outroot}epi_${ref}_brain )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

#Apply transformation to the field map
set cmd = ( $FSL/flirt -in ${pout} -ref ${out}epi_${ref}_brain -applyxfm )
set cmd = ( $cmd -init $inv_xfm -out ${pout}_to_${outroot}epi_${ref}_brain )
echo $cmd |& tee -a $log; $cmd |& tee -a $log ; set pout = ${pout}_to_${outroot}epi_${ref}_brain

#Apply transform to mask
set cmd = ( $FSL/flirt -in ${out}mag_brain_mask -ref ${out}epi_${ref}_brain -applyxfm )
set cmd = ( $cmd -init $inv_xfm -out ${out}mag_brain_mask_to_${outroot}epi_${ref}_brain )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

#Rebinarize mask
set cmd = ( $FSL/fslmaths ${out}mag_brain_mask_to_${outroot}epi_${ref}_brain -thr 0.5 -bin )
set cmd = ( $cmd ${out}mag_brain_mask_to_${outroot}epi_${ref}_brain )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

#If user wants, dilate brain mask slightly in order to prevent erosion
if ( $?dil == 1 ) then
	set cmd = ( $FSL/fslmaths ${out}mag_brain_mask_to_${outroot}epi_${ref}_brain -dilM )
	set cmd = ( $cmd -dilM -ero ${out}mag_brain_mask_to_${outroot}epi_${ref}_brain )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

#Run fugue using the registerted field map on the distorted epi.
#Will unwarp the epi reference frame and save the shift map that does this.
set cmd = ( $FSL/fugue --loadfmap=${pout} --dwell=$dwell -u ${out}epi_${ref}_unwarped )
set cmd = ( $cmd  -i ${out}epi_${ref} --saveshift=${out}epi_${ref}_unwarp_shift )
set cmd = ( $cmd --mask=${out}mag_brain_mask_to_${outroot}epi_${ref}_brain --unwarpdir=$dir )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

#Convert the shiftwarp to an absolute warp
set cmd = ( $FSL/convertwarp -s ${out}epi_${ref}_unwarp_shift -r ${out}epi_${ref} )
set cmd = ( $cmd --shiftdir=$dir -o ${out}epi_${ref}_unwarp_shift_warp )
echo $cmd |& tee -a $log; $cmd |& tee -a $log

###################
# motion correction
###################
if ( $?mask == 0 ) set mask = "--mask=${out}mag_brain_mask_to_${outroot}epi_${ref}_brain"

if ( $?dtimc == 1  || $?boldmc == 1 ) then
	set cmd = ( $FSL/fslsplit ${out}epi ${out}epi_tmp )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set vols = `$FSL/fslval ${out}epi dim4`; @ k = 0
	while ( $k < $vols )
		set num = `printf "%04d" $k`; set tmp = ${out}epi_tmp${num}
		#Create correct pre matrices
		if ( $?dtimc == 1 ) then
			echo "processing $tmp" >> ${out}eddycorrect.log
			echo "" >> ${out}eddycorrect.log
			set cmd = ( $FSL/flirt -in $tmp -ref ${out}epi_${ref} -nosearch -omat ${tmp}.mat )
			set cmd = ( $cmd -paddingsize 1 ); echo $cmd |& tee -a $log; $cmd |& tee -a $log
			set pre = "${tmp}.mat"
			echo "Final Result:" >> ${out}eddycorrect.log
			cat $pre >> ${out}eddycorrect.log
			echo "" >> ${out}eddycorrect.log
		else
			if ( $k == 0 ) then
				set cmd = ( $FSL/mcflirt -reffile ${out}epi_${ref} -in ${out}epi -plots )
				set cmd = ( $cmd -rmsrel -rmsabs -mats -out ${out}mcf -cost $cost )
				echo $cmd |& tee -a $log; $cmd |& tee -a $log
			endif
			set pre = "${out}mcf.mat/MAT_${num}"
		endif

		#Apply motion correction
		set cmd = ( $FSL/applywarp -i $tmp -o ${tmp}_mcf_unwarp -r ${out}epi_${ref} --abs $mask )
		set cmd = ( $cmd -w ${out}epi_${ref}_unwarp_shift_warp --premat=$pre --interp=spline )
		echo $cmd |& tee -a $log; $cmd |& tee -a $log
		@ k++
	end

	#Merge the split, corrected frames
	set cmd = ( $FSL/fslmerge -t ${out}epi_mcf_unwarped ${out}epi_tmp*_mcf_unwarp.nii.gz )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
	set cmd = ( rm ${out}epi_tmp* ); echo $cmd |& tee -a $log; $cmd |& tee -a $log
else if ( $?no4d == 0 ) then
	#Apply shift warp to whole series. Assumes series has already been aligned.
	set cmd = ( $FSL/applywarp -i ${out}epi -o ${out}epi_unwarped -r ${out}epi --abs $mask )
	set cmd = ( $cmd -w ${out}epi_${ref}_unwarp_shift_warp --interp=spline )
	echo $cmd |& tee -a $log; $cmd |& tee -a $log
endif

echo "" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "" |& tee -a $log
echo "${program} is DONE" |& tee -a $log
echo "End Time: `date '+%Y-%m-%d-%I-%M-%S'`" |& tee -a $log
echo "" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "#######################################" |& tee -a $log
echo "" |& tee -a $log
